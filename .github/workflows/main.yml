# Test on merges to main
# When tests succeeds: increments the tag
# If a tag was used, push to the relevant channels
name: main

env:
  NAME: GroupHorizons
  BIN_PATH: ""

on:
  push:
    branches:
      - main
    paths-ignore:
      - README.md
      - branch.yml
  workflow_dispatch: {}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      # Checkout (without LFS)
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: "0"

      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # Test
      - name: Run tests
        uses: game-ci/unity-test-runner@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version: ${{ steps.buildStep.outputs.buildVersion }}
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          # - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          # - StandaloneWindows # Build a Windows standalone.
          # - StandaloneWindows64 # Build a Windows 64-bit standalone.
          # - StandaloneLinux64 # Build a Linux 64-bit standalone.
          # - iOS # Build an iOS player.
          # - Android # Build an Android .apk standalone app.
          - WebGL # WebGL.
    steps:
      # Checkout (without LFS)
      - name: Checkout repository
        uses: actions/checkout@v3

      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # Build
      - name: Build project
        id: buildStep
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: ${{ env.NAME}}-${{ matrix.targetPlatform }}
          versioning: Semantic

      # Set BIN_PATH env var
      - name: Correct path specificaly for WebGL
        if: matrix.targetPlatform == 'WebGL'
        run: |
          echo "BIN_Path=build/WebGL/${{ env.NAME }}-WebGL" >> $GITHUB_ENV

      - name: Path for non-WebGL
        if: matrix.targetPlatform != 'WebGL'
        run: |
          echo "BIN_Path=build/${{ matrix.targetPlatform }}" >> $GITHUB_ENV

      # Zip
      - name: Install zip
        uses: montudor/action-zip@v1

      - name: Zip output
        run: sudo zip -r ./${{ env.NAME}}-${{ matrix.targetPlatform }}-${{ steps.buildStep.outputs.buildVersion }}.zip .
        working-directory: ./${{env.BIN_Path}}
      # Output
      - name: Append zipped build result to artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.NAME}}-${{ github.sha }}
          path: ./${{env.BIN_Path}}/${{ env.NAME}}-${{ matrix.targetPlatform }}-${{ steps.buildStep.outputs.buildVersion }}.zip
          if-no-files-found: error

  release:
    name: Prepare pre-release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Retrieve all build results from artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.NAME}}-${{ github.sha }}
          path: bin

      - name: Replace latest pre-release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: bin/

      - name: Upload webgl to itch.io
        uses: robpc/itchio-upload-action@v1
        if: ${{ matrix.targetPlatform == 'WebGL' }}
        with:
          path: bin/${{ env.NAME}}-WebGL-${{ needs.build.outputs.version }}.zip
          project: boersnoes/${{ env.NAME}}
          channel: html5-alpha
          version: ${{ needs.build.outputs.version }}
          api-key: ${{ secrets.ITCHIO_API_KEY }}
